<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/16/hello-world/"/>
      <url>/2022/11/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP源码分析</title>
      <link href="/2022/11/16/Spring-AOP%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2022/11/16/Spring-AOP%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h1><h2 id="1-AOP-的关键"><a href="#1-AOP-的关键" class="headerlink" title="1. AOP 的关键"></a>1. AOP 的关键</h2><ol><li>我们通过注解 <code>@EnableAspectJAutoProxy</code> 开启自动代理</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAspectJAutoProxy</span> <span class="token comment">// 开启自动代理</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AopOpenConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>而该注解中又引入了<code>AspectJAutoProxyRegistrar.class</code></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AspectJAutoProxyRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableAspectJAutoProxy</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">boolean</span> <span class="token function">proxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token keyword">boolean</span> <span class="token function">exposeProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><code>AspectJAutoProxyRegistrar</code> 类中会给容器中添加一个 <code>AnnotationAwareAspectJAutoProxyCreator</code>，它是一个<code>后置处理器</code>，通过该后置处理器完成 AOP 功能。</li></ol><p><img src="https://myimgplace.oss-cn-hangzhou.aliyuncs.com/note/img/20221117102657.png"></p><p><img src="https://myimgplace.oss-cn-hangzhou.aliyuncs.com/note/img/20221117102830.png"></p><h2 id="2-切面如何获取到的？"><a href="#2-切面如何获取到的？" class="headerlink" title="2. 切面如何获取到的？"></a>2. 切面如何获取到的？</h2><ol><li>Spring 的切面是在整个容器启动时就完全加载完毕的。</li><li>切面的获取是在 <code>InitializationBean</code> 阶段，通过 <code>后置处理器（AnnotationAwareAspectJAutoProxyCreator）</code> 进行初始化之前的后置处理来完成的，判断当前组件是否需要创建代理对象也是在此判断的。</li></ol><p><img src="https://myimgplace.oss-cn-hangzhou.aliyuncs.com/note/img/20221111133453.png"></p><ol start="3"><li>第一次进入该处理时，获取切面文件，在 <code>shouldSkip(Class&lt;?&gt; beanClass, String beanName)</code>中 调用 <code>findCandidateAdvisors();</code>，获取所有的组件，寻找我们全部的切面文件，组件名称添加到 <code>aspectBeanNames</code>，文件以及对应的切换以，key 为组件名称，value 为 其中全部的切面方法，进行缓存</li></ol><p><img src="https://myimgplace.oss-cn-hangzhou.aliyuncs.com/note/img/20221111133805.png"></p><h2 id="3-代理对象的创建"><a href="#3-代理对象的创建" class="headerlink" title="3. 代理对象的创建"></a>3. 代理对象的创建</h2><p>​被切入的组件需要AOP创建代理对象，从而执行回调增强。</p><blockquote><p>代理对象在哪里被创建了？</p></blockquote><p>​代理对象在 Bean进行初始化后，通过 <code>AnnotationAwareAspectJAutoProxyCreator </code>后置处理器进行初始化后置处理返回了代理对象，并替换了原来的对象。</p><p><img src="https://myimgplace.oss-cn-hangzhou.aliyuncs.com/note/img/20221117115420.png"></p><p><img src="https://myimgplace.oss-cn-hangzhou.aliyuncs.com/note/img/20221117115557.png"></p><h2 id="4-AOP-的执行"><a href="#4-AOP-的执行" class="headerlink" title="4. AOP 的执行"></a>4. AOP 的执行</h2><p>​因为之前给切入类创建了代理对象并保存到了容器中，所以我们从容器中拿到的就是代理对象，该代理对象封装了目标对象、回调拦截信息（即增强器）等详细信息。</p><p><img src="https://myimgplace.oss-cn-hangzhou.aliyuncs.com/note/img/20221117120201.png"></p><blockquote><p>执行</p></blockquote><ol><li>首先会由 <code>DynamicAdvisedInterceptor </code>进行拦截，执行<code>Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</code></li><li>获取拦截器链,通过 <code>getInterceptorsAndDynamicInterceptionAdvice()</code> 获取组件下增强器，并遍历转换为 <code>MethodInterceptor</code>，返回拦截器集合并排序，生成拦截器链。</li></ol><p><img src="https://myimgplace.oss-cn-hangzhou.aliyuncs.com/note/img/20221117122017.png"></p><ol start="3"><li>创建一个 <code>CglibMethodInvocation </code>执行 <code>proceed()</code>,调用 父类的模板方法。</li></ol><p><img src="https://myimgplace.oss-cn-hangzhou.aliyuncs.com/note/img/20221117121842.png"></p><h2 id="5-回调通知"><a href="#5-回调通知" class="headerlink" title="5. 回调通知"></a>5. 回调通知</h2><h3 id="1-Before"><a href="#1-Before" class="headerlink" title="1. @Before"></a>1. @Before</h3><p>​先直接执行增强器的前置通知方法，通过传入的 this 对象继续执行 proceed(); 右移索引继续调用。</p><p><img src="https://myimgplace.oss-cn-hangzhou.aliyuncs.com/note/img/20221117122145.png"></p><h3 id="2-After"><a href="#2-After" class="headerlink" title="2. @After"></a>2. @After</h3><p>​先继续执行后续增强方法，当所有的方法执行完毕了，最后在 finally 块中执行后置通知。</p><p><img src="https://myimgplace.oss-cn-hangzhou.aliyuncs.com/note/img/20221117122225.png"></p><h3 id="3-AfterReturning"><a href="#3-AfterReturning" class="headerlink" title="3. @AfterReturning"></a>3. @AfterReturning</h3><p>​先执行后续方法，拿到返回值之后，执行增强器的返回通知回调方法。</p><p><img src="https://myimgplace.oss-cn-hangzhou.aliyuncs.com/note/img/20221117122306.png"></p><h3 id="4-AfterThrowing"><a href="#4-AfterThrowing" class="headerlink" title="4. @AfterThrowing"></a>4. @AfterThrowing</h3><p>​先执行后续方法，并 try catch 尝试捕获异常，那么就会执行 异常通知。</p><p><img src="https://myimgplace.oss-cn-hangzhou.aliyuncs.com/note/img/20221117122408.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring,源码，Spring AOP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
